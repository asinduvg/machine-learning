matplot(t(FieldGoals))
matplot(t(FieldGoals), type = "b")
matplot(t(FieldGoals), type = "b", pch = 15:18)
matplot(t(FieldGoals), type = "b", pch = 15:18, col = c(1:4, 6))
legend("bottomleft", inset = 0.01, legend = Players, col = c(1:4, 6), pch = 15:18, horiz = F)
matplot(t(FieldGoals/Games), type = "b", pch = 15:18, col = c(1:4, 6))
matplot(t(FieldGoals/FieldGoalAttempts), type = "b", pch = 15:18, col = c(1:4, 6))
legend("bottomleft", inset = 0.01, legend = Players, col = c(1:4, 6), pch = 15:18, horiz = F)
x <- c("a", "b", "c", "d", "e")
x
x <- c("a", "b", "c", "d", "e")
x
x[c(1, 5)]
x[1]
Games
Games
Games[1:3, 6:10]
Games[c(1, 10)]
Games[c(1, 10), ]
Games[, c("2008", "2009")]
boats <- c(447, 460, 481, 498, 513, 512, 526, 559, 585, 614, 645, 675, 711, 719, 681, 679, 678, 696, 713, 732, 755, 809, 830, 880, 944, 962, 978, 983, 1010, 1024, 1027, 1010, 982)
mantees <- c(13, 21, 24, 16, 24, 20, 15, 34, 33, 33, 39, 43, 50, 47, 53, 38, 35, 49, 42, 60, 54, 66, 82, 78, 81, 95, 73, 69, 79, 90, 97)
plot(boats, manatees)
plot(boats, mantees)
mantees <- c(13, 21, 24, 16, 24, 20, 15, 34, 33, 33, 39, 43, 50, 47, 53, 38, 35, 49, 42, 60, 54, 66, 82, 78, 81, 95, 73, 69, 79, 92, 73, 90, 97)
plot(boats, mantees)
sea.surface.temperature <- c(29.68, 29.87, 30.16, 30.22, 30.48, 30.65, 30.90)
growth <- c(2.63, 2.58, 2.60, 2.48, 2.26, 2.38, 2.26)
plot(sea.surface.temperature, growth)
mx <- mean(sea.surface.temperature)
sx <- sd(sea.surface.temperature)
mx
sx
my <- mean(growth)
sy <- sd(growth)
sy
x <- (sea.surface.temperature - mx) / sx
y <- (growth - my) / sy
k <- x * y
l <- sum(1 / (7 - 1)) * 1
rm(l)
l <- sum(k)
r <- (1 / (7 - 1)) * 1
r
rm(r)
r <- (1 / (7 - 1)) * l
r
cor(sea.surface.temperature, growth)
NEA <- c(-94, -57, -29, 135, 143, 151, 245, 355, 392, 473, 486, 535, 571, 580, 620, 690)
fat.gain <- c(4.2, 3.0, 3.7, 2.7, 3.2, 3.6, 2.4, 1.3, 3.8, 1.7, 1.6, 2.2, 1.0, 0.4, 2.3, 1.1)
plot(NEA, fat.gain)
abline(a = 3.505, b = -0.00344)
y = 3.505 - (0.00344 * 400)
y
library(igrapj)
library(igraph)
install.packages("igraph")
library(igraph)
g <- graph(c(1, 2))
g
plot(g)
plot(g, vertex.color = "green", vertex.size = 40)
plot(g, vertex.color = "green", vertex.size = 40,
edge.color = 'red')
g <- graph(c(1, 2, 2, 3))
plot(g)
plot(g, vertex.color = "green", vertex.size = 40,
edge.color = 'red')
g <- graph(c(1, 2, 2, 3, 3, 4, 4, 1))
plot(g)
plot(g, vertex.color = "green", vertex.size = 40,
edge.color = 'red')
g <- graph(c(1, 2, 2, 3, 3, 4, 4, 1), directed = F)
plot(g)
plot(g, vertex.color = "green", vertex.size = 40,
edge.color = 'red')
g <- graph(c(1, 2, 2, 3, 3, 4, 4, 1), directed = F, n = 7)
plot(g)
plot(g, vertex.color = "green", vertex.size = 40,
edge.color = 'red')
g[]
g[]
graph(c("Amy", "Ram", "Li", "Li", "Amy", "Amy", "Li", "Kate", "Li"))
g1 <- graph(c("Amy", "Ram", "Ram", "Li", "Li", "Amy", "Amy", "Li", "Kate", "Li"))
plot(g1)
g1
?read.csv
data <- read.csv(file.choose())
data
install.packages("readxl")
data <- read_excel("C:\Users\AV\Downloads\LungCapData.xlsx")
typos = c(2,3,0,3,1,0,0,1)
mean(typos)
var(typos)
library(MASS)
attach(florida)
?MASS
data(cats)
summary(cats)
?with
with(cats, plot(Bwt, Hwt))
library(MASS)
data(cats)
with(cats, plot(Bwt, Hwt))
?plot
with(cats, plot(Bwt, Hwt, main = 'Hwt' vs 'Bwt'))
with(cats, plot(Bwt, Hwt, main = 'Hwt vs Bwt'))
with(cats, plot(Bwt, Hwt, main = 'Bwt vs Hwt'))
library(MASS)
data(cats)
with(cats, plot(Bwt, Hwt, main = 'Bwt vs Hwt'))
lm(Hwt~Bwt, data = cats)
?par
par(mfrow=c(2,2))
plot(lm(Hwt~Bwt, data = cats))
par(mfrow=c(1,1))
?lm
?out
?out
??out
plot(cooks.distance(lm.res))
?cooks.distance
a = lm(Hwt~Bwt, data = cats)
par(mfrow=c(1,1))
plot(cooks.distance(a))
a = lm(Hwt~Bwt, data = cats)
// 1.C
par(mfrow=c(2,2))
plot(a)
par(mfrow=c(1,1))
plot(cooks.distance(a))
a = lm(Hwt~Bwt, data = cats)
# 1.C
par(mfrow=c(2,2))
plot(a)
par(mfrow=c(1,1))
plot(cooks.distance(a))
# 1.E
x = data.frame(Bwt=c(2.52))
predict.lm(a, x, interval = "prediction", cof.level = 0.95)
summary(a)
// 1.A
library(MASS)
data(cats)
with(cats, plot(Bwt, Hwt, main = 'Bwt vs Hwt'))
# 1.B
a = lm(Hwt~Bwt, data = cats)
# 1.C
par(mfrow=c(2,2))
plot(a)
par(mfrow=c(1,1))
plot(cooks.distance(a))
summary(a)
// 1.A
library(MASS)
data(cats)
with(cats, plot(Bwt, Hwt, main = 'Bwt vs Hwt'))
# 1.B
a = lm(Hwt~Bwt, data = cats)
# 1.C
par(mfrow=c(2,2))
plot(a)
par(mfrow=c(1,1))
plot(cooks.distance(a))
summary(a)
library(datasets)
str(iris)
?panel
p.cor <- function(x, y) {
usr <- par("usr");on.exit(par(usr))
par(usr=c(0,1,0,1))
r <- round(cor(x, y), digits = 2)
txt <- paste0("R= ", r)
c.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, c = c.cor * r)
}
u.panel <- function(x, y) {
points(x, y, pch=19, col=c("red", "green", "blue")[irirs$Species])
r <- round(cor(x, y), digits = 2)
txt <- paste0("R= ", r)
usr <- par("usr");on.exit(par(usr))
par(usr=c(0,1,0,1))
text(0.5, 0.9, txt)
}
pairs(iris[,1:4], lower.panel = p.cor, upper.panel = u.panel)
p.cor <- function(x, y) {
usr <- par("usr");on.exit(par(usr))
par(usr=c(0,1,0,1))
r <- round(cor(x, y), digits = 2)
txt <- paste0("R= ", r)
c.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = c.cor * r)
}
pairs(iris[,1:4], lower.panel = p.cor, upper.panel = u.panel)
str(iris)
u.panel <- function(x, y) {
points(x, y, pch=19, col=c("red", "green", "blue")[iris$Species])
r <- round(cor(x, y), digits = 2)
txt <- paste0("R= ", r)
usr <- par("usr");on.exit(par(usr))
par(usr=c(0,1,0,1))
text(0.5, 0.9, txt)
}
pairs(iris[,1:4], lower.panel = p.cor, upper.panel = u.panel)
install.packages("devtools")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("shiny")
install_github("StatsWithR/statsr")
install.packages("cubature")
install_github("StatsWithR/statsr")
library(devtools)
install_github("StatsWithR/statsr")
install_github("StatsWithR/statsr")
install_github("StatsWithR/statsr")
install.packages("devtools")
library(devtools)
library("devtools")
install_github("StatsWithR/statsr")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("shiny")
library(dplyr)
library(ggplot2)
library(statsr)
data(arbuthnot)
force(arbuthnot)
force(arbuthnot)
arbuthnot
View(arbuthnot)
View(arbuthnot)
View(arbuthnot)
dim(arbuthnot)
dim(arbuthnot)
names(arbuthnot)
arbuthnot$boys
ggplot(data = arbuthnot, aes(x = year, y = girls)) + geom_point()
5218 + 4683
ggplot(data = arbuthnot, aes(x = year, y = girls)) + geom_point()
arbuthnot$boys + arbuthnot$girls
arbuthnot <- arbuthnot %>% mutate(total = boys + girls)
View(arbuthnot)
ggplot(data = arbuthnot, aes(x = year, y = total))
ggplot(data = arbuthnot, aes(x = year, y = total)) + geom_point()
ggplot(data = arbuthnot, aes(x = year, y = total)) + geom_line()
ggplot(data = arbuthnot, aes(x = year, y = total)) + geom_line() + geom_point()
# type your code for the Exercise here, and Knit
ggplot(data = arbuthnot, aes(x = year, y = boys)) + geom_point()
# type your code for the Exercise here, and Knit
ggplot(data = arbuthnot, aes(x = year, y = boys)) + geom_point()
arbuthnot <- arbuthnot %>% mutate(more_boys = boys > girls)
data(present)
view(present)
view(present)
View(present)
# type your code for Question 4 here, and Knit
dim(present)
?range
range(present$year)
# type your code for Exercise here, and Knit
range(present$year)
# type your code for Question 5 here, and Knit
present <- present %>% mutate(total = boys + girls)
boys / total
present$boys / present$total
present <- present %>% mutate(prop_boys = boys / total)
ggplot(data = present, aes(x = year, y = prop_boys)) + geom_point()
ggplot(data = present, aes(x = year, y = prop_boys)) + geom_line()
# type your code for Question 6 here, and Knit
present <- present %>% mutate(more_boys = boys > girls)
ggplot(data = present, aes(x = year, y = more_boys)) + geom_point()
ggplot(data = present, aes(x = year, y = more_boys)) + geom_line()
# type your code for Question 7 here, and Knit
present <- present %>% mutate(prop_boy_girl = boys / girls)
ggplot(data = present, aes(x = year, y = prop_boy_girl)) + geom_point()
descr(present$total)
desc(present$total)
?desc
?desc
dplyr::desc(present$total)
arrange(dplyr::desc(present$total))
ggplot(data = arbuthnot, aes(x = year, y = girls)) + geom_point()
ggplot(data = present, aes(x = year, y = prop_boy_girl)) + geom_point()
ggplot(data = present, aes(x = year, y = prop_boys)) + geom_line()
ggplot(data = present, aes(x = year, y = prop_boy_girl)) + geom_point()
library(MASS)
attach(survey)
height
Height
height <- na.omit(Height)
Height
height <- na.omit(Height)
height
MOE <- qnorm(0.975*9.48/ sqrt(length(height)))
MOE
MOE <- qnorm(0.975)*9.48/ sqrt(length(height)))
MOE <- qnorm(0.975)*9.48/ sqrt(length(height))
MOE
clear
df <- read.csv('data.csv')
plot(df$CRIM, df$ZN, xlab = "crime")
plot(df$ZN, df$TAX, xlab = "crime")
plot(df$CRIM, df$MEDV, xlab = "crime")
plot(df$NOX, df$ZN, xlab = "no2")
plot(df$ZN, df$NOX, xlab = "prop")
df
dim(df)
plot(df$ZN, df$MEDV, xlab = "proportion of presidential land zoned for lots over 25,000 sq.ft.")
plot(df$ZN, df$MEDV, xlab = "proportion of presidential land zoned for lots over 25,000 sq.ft.", ylab = "Median value of owner-occupied homes in $1000's")
plot(df$ZN, df$MEDV, xlab = "proportion of presidential land zoned for lots over 25,000 sq.ft.", ylab = "MEDV")
plot(df$ZN, df$MEDV, xlab = "ZN", ylab = "MEDV")
plot(df$INDUS, df$MEDV, xlab = "INDUS", ylab = "MEDV")
plot(df$CHAS, df$MEDV, xlab = "CHAS", ylab = "MEDV")
plot(df$NOX, df$MEDV, xlab = "NOX", ylab = "MEDV")
plot(df$RM, df$MEDV, xlab = "RM", ylab = "MEDV")
plot(df$DIS, df$MEDV, xlab = "DIS", ylab = "MEDV")
plot(df$AGE, df$MEDV, xlab = "AGE", ylab = "MEDV")
plot(df$AGE, df$MEDV, xlab = "AGE", ylab = "MEDV")
plot(df$DIS, df$MEDV, xlab = "DIS", ylab = "MEDV")
plot(df$AGE, df$MEDV, xlab = "AGE", ylab = "MEDV")
plot(df$DIS, df$MEDV, xlab = "DIS", ylab = "MEDV")
plot(df$AGE, df$MEDV, xlab = "AGE", ylab = "MEDV")
plot(df$AGE, df$MEDV, xlab = "AGE", ylab = "MEDV")
plot(df$AGE, df$MEDV, xlab = "AGE", ylab = "MEDV")
plot(df$DIS, df$MEDV, xlab = "DIS", ylab = "MEDV")
plot(df$RAD, df$MEDV, xlab = "RAD", ylab = "MEDV")
plot(df$TAX, df$MEDV, xlab = "TAX", ylab = "MEDV")
plot(df$TAX, df$MEDV, xlab = "TAX", ylab = "MEDV")
plot(df$PTRATIO, df$MEDV, xlab = "PTRATIO", ylab = "MEDV")
plot(df$B, df$MEDV, xlab = "B", ylab = "MEDV")
plot(df$LSTAT, df$MEDV, xlab = "LSTAT", ylab = "MEDV")
df2 <- na.omit(df)
dim(df)
dim(df2)
plot(df$ZN, df$MEDV, xlab = "ZN", ylab = "MEDV")
plot(df$INDUS, df$MEDV, xlab = "INDUS", ylab = "MEDV")
plot(df$CHAS, df$MEDV, xlab = "CHAS", ylab = "MEDV")
plot(df$NOX, df$MEDV, xlab = "NOX", ylab = "MEDV")
plot(df$RM, df$MEDV, xlab = "RM", ylab = "MEDV")
plot(df$AGE, df$MEDV, xlab = "AGE", ylab = "MEDV")
plot(df2$ZN, df$MEDV, xlab = "ZN", ylab = "MEDV")
plot(df2$ZN, df2$MEDV, xlab = "ZN", ylab = "MEDV")
plot(df2$INDUS, df2$MEDV, xlab = "INDUS", ylab = "MEDV")
plot(df2$CHAS, df2$MEDV, xlab = "CHAS", ylab = "MEDV")
plot(df2$NOX, df2$MEDV, xlab = "NOX", ylab = "MEDV")
plot(df$AGE, df$MEDV, xlab = "AGE", ylab = "MEDV")
plot(df2$AGE, df2$MEDV, xlab = "AGE", ylab = "MEDV")
plot(df2$DIS, df2$MEDV, xlab = "DIS", ylab = "MEDV")
plot(df2$RAD, df2$MEDV, xlab = "RAD", ylab = "MEDV")
plot(df2$TAX, df2$MEDV, xlab = "TAX", ylab = "MEDV")
plot(df2$PTRATIO, df2$MEDV, xlab = "PTRATIO", ylab = "MEDV")
plot(df2$B, df2$MEDV, xlab = "B", ylab = "MEDV")
plot(df2$LSTAT, df2$MEDV, xlab = "LSTAT", ylab = "MEDV")
plot(df2$RM, df2$MEDV, xlab = "RM", ylab = "MEDV")
hist(df2)
hist(c(df2$CRIM, df2$ZN))
library(reshape)
install.packages('reshape')
library(reshape)
meltData = melt(df2)
boxplot(data=meltData, value~variable)
boxplot(df2$CRIM)
boxplot(df2$CRIM, df2$ZN)
boxplot((df2$CRIM), (df2$ZN))
boxplot(data=df2$CRIM,xlab='ee')
?boxplot
boxplot(data=df2$CRIM,xlab=ee)
boxplot(data=df2$CRIM,x=ee)
boxplot(data=df2$CRIM,x='ee')
boxplot(data=df2$CRIM)
boxplot(df2$CRIM)
boxplot(df2$CRIM, xlab='p')
boxplot((df2$CRIM, xlab = 'CRIM'), (df2$ZN, xlab = 'ZN'))
boxplot((df2$CRIM), (df2$ZN))
boxplot(df2$CRIM, xlab = 'CRIM', df2$ZN)
boxplot(df2$CRIM, xlab = 'CRIM', df2$ZN, xlab='ZN')
boxplot(data=meltData, value~variable)
plot(df2$TAX, df2$MEDV, xlab = "TAX", ylab = "MEDV")
plot(df2$TAX, df2$MEDV, xlab = "TAX", ylab = "MEDV")
boxplot(data=meltData, value~variable)
Dplot(df2$AGE, df2$MEDV, xlab = "AGE", ylab = "MEDV")
Dplot(df2$AGE, df2$MEDV, xlab = "AGE", ylab = "MEDV")
plot(df2$AGE, df2$MEDV, xlab = "AGE", ylab = "MEDV")
boxplot(data=meltData, value~variable)
boxplot(df2$RM)
plot(df2)
df2$MEDV
boxplot(df2$MEDV)
hist(df2$MEDV)
plot(df2)
#mean RM
mean_rm <- mean(df2$RM)
mean_rm
xbar = mean(df2$MEDV, na.rm = TRUE)
xbar
mean(df2$MEDV)
sigma = sd(df2$MEDV, na.rm = TRUE)
sigma
n = length(na.omit(df2$MEDV))
n
z = (xbar - Ha) / (sigma/sqrt(n))
z
#H(a) = 6.287589
Ha <- mean_rm
z = (xbar - Ha) / (sigma/sqrt(n))
z
pvalue = 2 *pnorm(z)
pvalue
#mean RM
mean_rm <- mean(df2$RM)
#H(a) = 6.287589
Ha <- mean_rm
xbar = mean(df2$MEDV, na.rm = TRUE)
xbar
sigma = sd(df2$MEDV, na.rm = TRUE)
sigma
n = length(na.omit(df2$MEDV))
n
z = (xbar - Ha) / (sigma/sqrt(n))
z
pvalue = 2 *pnorm(z)
pvalue
plot(df2$RM, df2$MEDV, xlab = "RM", ylab = "MEDV")
boxplot(df2$CRIM, xlab = 'CRIM', df2$ZN, xlab='ZN')
plot(df2$CRIM, df2$MEDV, xlab = "CRIM", ylab = "MEDV")
hist(df2$CRIM)
hist(df2$CRIM, xlab = 'CRIM')
df2
df2
hist(df2$ZN, xlab = 'ZN')
hist(df2$INDUS, xlab = 'INDUS')
hist(df2$CHAS, xlab = 'CHAS')
hist(df$NOX, xlab = 'NOX')
hist(df2$RM, xlab = 'RM')
hist(df2$AGE, xlab = 'AGE')
hist(df$DIS, xlab = 'DIS')
hist(df2$RAD, xlab = 'RAD')
hist(df2$TAX, xlab = 'TAX')
hist(df2$PTRATIO, xlab = 'PTRATIO')
hist(df2$B, xlab = 'B')
hist(df2$LSTAT, xlab = 'LSTAT')
clear
cls
clc
cls
pwd
ls
setwd("B:/ML/A-Z/Part1-Data-Preprocessing/MyWork")
# Importing the dataset
dataset = read.csv('Data.csv')
View(dataset)
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
help mean
help(mean)
help(na.rm)
??na.rm
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('Yes', 'No'),
lables = c(1, 2))
dataset$Purchased = factor(dataset$Purchased,
levels = c('Yes', 'No'),
labels = c(1, 2))
dataset$Purchased = factor(dataset$Purchased,
levels = c('Yes', 'No'),
labels = c(1, 0))
dataset$Purchased = factor(dataset$Purchased,
levels = c('Yes', 'No'),
labels = c(1, 0))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
# Data Preprocessing
# Importing the dataset
dataset = read.csv('Data.csv')
# Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#Encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
# Splitting the dataset into the Training set and Test set
install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
split
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(training_set)
View(test_set)
# Feature Scaling
training_set = scale(training_set)
test_set = scale(test_set)
# Feature Scaling
training_set[, 2:3] = scale(training_set[, 2:3])
test_set[, 2:3] = scale(test_set[, 2:3])
